@page "/"
@inject StockDataService DataService
@using MudBlazor
@using MudBlazor.Charts

<PageTitle>WiseBooks - Trading Dashboard</PageTitle>

<div class="dashboard">
    <!-- Header -->
    <div class="dashboard-header">
        <div>
            <h1 class="stock-title">
                <i class="bi bi-graph-up me-2"></i>MARA - Yesterday's Analysis
            </h1>
        </div>
        <button @onclick="LoadStock" class="refresh-button" disabled="@isLoading">
            <i class="bi bi-arrow-clockwise me-1"></i>
            @if (isLoading) {
                <span>Refreshing...</span>
            } else {
                <span>Refresh</span>
            }
        </button>
    </div>

    @if (snapshot != null)
    {
        <!-- Key Metrics -->
        <div class="metrics-section">
            <h2 class="metrics-title">
                <i class="bi bi-speedometer2 me-2"></i>Key Metrics
            </h2>
            
            <div class="metric-item">
                <span class="metric-label"><i class="bi bi-arrow-up-circle me-1 text-success"></i>Previous High</span>
                <span class="metric-value">@($"${snapshot.PreviousHigh}")</span>
            </div>
            
            <div class="metric-item">
                <span class="metric-label"><i class="bi bi-arrow-down-circle me-1 text-danger"></i>Previous Low</span>
                <span class="metric-value">@($"${snapshot.PreviousLow}")</span>
            </div>
            
            <div class="metric-item">
                <span class="metric-label"><i class="bi bi-dash-circle me-1 text-muted"></i>Previous Close</span>
                <span class="metric-value">@($"${snapshot.PreviousClose}")</span>
            </div>
            
            <div class="metric-item">
                <span class="metric-label"><i class="bi bi-percent me-1 text-primary"></i>Gap %</span>
                <span class="metric-value @(snapshot.GapPercentage >= 0 ? "text-success" : "text-danger")">
                    @($"{snapshot.GapPercentage}%")
                </span>
            </div>
        </div>

        <div class="divider"></div>

        <!-- Price Action -->
        <div class="price-action-section">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h2 class="metrics-title">
                    <i class="bi bi-bar-chart-line me-2"></i>Yesterday's Price Action
                </h2>
                <span class="badge @GetPositionBadgeClass()">
                    <i class="bi @GetPositionIcon() me-1"></i>@snapshot.ClosePositionInCandle Close
                </span>
            </div>
            
            <div class="chart-container">
                <MudChart Height="300" ChartType="ChartType.Line">
                    <MudChartSeries Values="@priceValues" 
                                 Name="MARA" 
                                 ChartSeriesType="ChartSeriesType.Line"
                                 Fill="false"
                                 StrokeWidth="3"
                                 StrokeColor="#4a6bdf"/>
                    <MudChartOptions XAxisLabels="@timeLabels"
                                 YAxisTicks="5"
                                 DisableLegend="true"
                                 XAxisLines="true"
                                 YAxisLines="true"/>
                    <MudChartLineOptions Tension="0.4" PointRadius="3"/>
                </MudChart>
            </div>
        </div>
    }
    else
    {
        <div class="loading-spinner">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
</div>

@code {
    private StockSnapshot? snapshot;
    private double[] priceValues = Array.Empty<double>();
    private string[] timeLabels = Array.Empty<string>();
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadStock();
    }

    private async Task LoadStock()
    {
        isLoading = true;
        try {
            snapshot = await DataService.GetMaraSnapshotAsync();
            if (snapshot != null)
            {
                priceValues = new[] { 
                    (double)snapshot.PreviousLow, 
                    (double)snapshot.PreviousClose, 
                    (double)snapshot.PreviousHigh 
                };
                timeLabels = new[] { "Low", "Close", "High" };
            }
        }
        finally {
            isLoading = false;
        }
    }

    private string GetPositionBadgeClass() => 
        snapshot?.ClosePositionInCandle switch
        {
            "High" => "bg-success",
            "Middle" => "bg-warning text-dark",
            _ => "bg-danger"
        };
    
    private string GetPositionIcon() =>
        snapshot?.ClosePositionInCandle switch
        {
            "High" => "bi-arrow-up",
            "Middle" => "bi-dash",
            _ => "bi-arrow-down"
        };
}