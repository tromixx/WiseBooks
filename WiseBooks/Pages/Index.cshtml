@page
@model WiseBooks.Pages.IndexModel
@{
    ViewData["Title"] = "WiseBooks - Trading Dashboard";
}

<div class="container-fluid trading-dashboard">
    <!-- Dashboard Header -->
    <div class="row dashboard-header mb-4">
        <div class="col-12 text-center">
            <h1 class="display-4">WiseBooks Trading Dashboard</h1>
            <p class="lead">Real-time market analysis at your fingertips</p>
        </div>
    </div>

    <!-- Key Metrics Dashboard -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card metric-card">
                <div class="card-body">
                    <h5 class="card-title">MARA</h5>
                    <h6 class="card-subtitle mb-2 text-muted">Marathon Digital</h6>
                    <div class="metric-value">$18.40</div>
                    <div class="metric-change positive">+2.34%</div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card metric-card">
                <div class="card-body">
                    <h5 class="card-title">Gap %</h5>
                    <h6 class="card-subtitle mb-2 text-muted">Today's Opening</h6>
                    <div class="metric-value">4.27%</div>
                    <div class="metric-change positive">Bullish</div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card metric-card">
                <div class="card-body">
                    <h5 class="card-title">Volume</h5>
                    <h6 class="card-subtitle mb-2 text-muted">Today's Activity</h6>
                    <div class="metric-value">12.4M</div>
                    <div class="metric-change neutral">+34% avg</div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card metric-card">
                <div class="card-body">
                    <h5 class="card-title">Range</h5>
                    <h6 class="card-subtitle mb-2 text-muted">Yesterday's</h6>
                    <div class="metric-value">$17.2-$18.1</div>
                    <div class="metric-change">5.2% range</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Chart with Thermometer -->
    <div class="row mb-4">
        <div class="col-md-1">
            <div class="thermometer-container">
                <div class="thermometer">
                    <div class="thermometer-track">
                        <div class="thermometer-fill" id="recommendationFill"></div>
                    </div>
                    <div class="thermometer-labels">
                        <span>Buy</span>
                        <span>Neutral</span>
                        <span>Sell</span>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-11">
            <div class="card chart-card">
                <div class="card-body">
                    <h5 class="card-title">MARA - 5 Day Price Action with Prediction</h5>
                    <div class="chart-container" style="position: relative; height:400px; width:100%">
                        <canvas id="priceChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
<style>
    .trading-dashboard {
        padding: 20px;
        background-color: #f8f9fa;
    }
    
    .dashboard-header {
        background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
        color: white;
        padding: 20px;
        border-radius: 8px;
    }
    
    .metric-card {
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
        height: 100%;
    }
    
    .metric-card:hover {
        transform: translateY(-5px);
    }
    
    .metric-value {
        font-size: 24px;
        font-weight: bold;
        margin: 10px 0;
    }
    
    .metric-change {
        font-size: 14px;
    }
    
    .positive {
        color: #28a745;
    }
    
    .negative {
        color: #dc3545;
    }
    
    .neutral {
        color: #6c757d;
    }
    
    .chart-card {
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }
    
    .card-title {
        color: #343a40;
        font-weight: 600;
    }

    .chart-container {
        min-height: 250px;
    }

    /* Thermometer Styles */
    .thermometer-container {
        display: flex;
        justify-content: center;
        height: 100%;
        padding-top: 60px; /* Align with chart */
    }
    
    .thermometer {
        width: 60px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    
    .thermometer-track {
        width: 20px;
        height: 280px; /* Match chart height */
        background: linear-gradient(to top, #28a745 0%, #ffc107 50%, #dc3545 100%);
        border-radius: 10px;
        position: relative;
        overflow: hidden;
    }
    
    .thermometer-fill {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        height: 50%; /* Start neutral */
        background-color: rgba(255, 255, 255, 0.8);
        transition: height 0.5s ease;
    }
    
    .thermometer-labels {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        height: 280px; /* Match chart height */
        margin-left: 10px;
        font-size: 12px;
        text-align: left;
    }
    
    .thermometer-labels span:first-child {
        color: #28a745;
    }
    
    .thermometer-labels span:nth-child(2) {
        color: #ffc107;
    }
    
    .thermometer-labels span:last-child {
        color: #dc3545;
    }
</style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Clean up storage to prevent errors
            try {
                if (window.indexedDB && indexedDB.databases) {
                    indexedDB.databases().then(dbs => {
                        dbs.forEach(db => {
                            indexedDB.deleteDatabase(db.name);
                        });
                    }).catch(e => console.log("IndexedDB cleanup error:", e));
                }
                localStorage.clear();
                sessionStorage.clear();
            } catch (e) {
                console.log("Storage cleanup error:", e);
            }

            // Enhanced mock data with prediction
            const dates = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Mon', 'Tue'];
            let closingPrices = [16.80, 17.50, 17.90, 18.50, 18.40];
            let predictedPrices = [18.40, 18.80]; // Starting from current price
            
            // Function to generate smooth prediction
            const generatePrediction = (lastPrice) => {
                const direction = Math.random() > 0.4 ? 1 : -1; // 60% chance to go up
                const strength = 0.1 + Math.random() * 0.3; // Random strength
                return [
                    lastPrice + (direction * strength * 0.5),
                    lastPrice + (direction * strength)
                ];
            };

            // Initial prediction
            predictedPrices = generatePrediction(closingPrices[closingPrices.length-1]);
            
            // Calculate recommendation strength (0-100%)
            const calculateRecommendation = (currentPrice, predictedPrices) => {
                const priceChange = predictedPrices[1] - currentPrice;
                // Normalize to 0-100 scale
                return Math.min(100, Math.max(0, 50 + (priceChange / currentPrice) * 2000));
            };

            // Update thermometer
            const updateThermometer = (recommendationStrength) => {
                const thermometerFill = document.getElementById('recommendationFill');
                thermometerFill.style.height = `${100 - recommendationStrength}%`;
            };

            // Initial recommendation
            let recommendationStrength = calculateRecommendation(
                closingPrices[closingPrices.length-1], 
                predictedPrices
            );
            updateThermometer(recommendationStrength);
            
            // Update metrics
            document.querySelector('.metric-value').textContent = `$${closingPrices[closingPrices.length-1].toFixed(2)}`;
            
            // Main Price Chart with Prediction
            const priceCtx = document.getElementById('priceChart').getContext('2d');
            const priceChart = new Chart(priceCtx, {
                type: 'line',
                data: {
                    labels: dates,
                    datasets: [
                        {
                            label: 'Actual Price',
                            data: [...closingPrices, null, null], // Pad with null for prediction days
                            borderColor: 'rgba(0, 123, 255, 1)',
                            backgroundColor: 'rgba(0, 123, 255, 0.1)',
                            borderWidth: 2,
                            tension: 0.3,
                            fill: true,
                        },
                        {
                            label: 'Predicted Price',
                            data: [null, null, null, null, closingPrices[closingPrices.length-1], ...predictedPrices],
                            borderColor: 'rgba(220, 53, 69, 0.7)',
                            backgroundColor: 'rgba(220, 53, 69, 0.05)',
                            borderWidth: 2,
                            borderDash: [5, 5],
                            tension: 0.3,
                            fill: false,
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: 'MARA Weekly Performance with Prediction'
                        },
                        legend: {
                            display: true,
                            position: 'top'
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed.y !== null) {
                                        label += `$${context.parsed.y.toFixed(2)}`;
                                        if (context.dataIndex >= closingPrices.length) {
                                            label += ' (predicted)';
                                        }
                                    }
                                    return label;
                                }
                            }
                        }
                    },
                    interaction: {
                        mode: 'index',
                        intersect: false
                    },
                    scales: {
                        y: {
                            beginAtZero: false,
                            suggestedMin: Math.min(...closingPrices) - 0.5,
                            suggestedMax: Math.max(...closingPrices, ...predictedPrices) + 0.5,
                            ticks: {
                                stepSize: 0.5,
                                callback: function(value) {
                                    return `$${value.toFixed(2)}`;
                                }
                            },
                            title: {
                                display: true,
                                text: 'Price ($)'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Day'
                            }
                        }
                    }
                }
            });

            // Simulate real-time updates
            setInterval(() => {
                // Simulate small price fluctuations in actual data
                const fluctuation = (Math.random() - 0.5) * 0.15; // Small random change
                const newPrice = closingPrices[closingPrices.length-1] + fluctuation;
                closingPrices.push(newPrice);
                closingPrices.shift(); // Keep same length
                
                // Generate new prediction based on latest price
                predictedPrices = generatePrediction(newPrice);
                
                // Update chart data
                priceChart.data.datasets[0].data = [...closingPrices, null, null];
                priceChart.data.datasets[1].data = [null, null, null, null, newPrice, ...predictedPrices];
                
                // Update y-axis scale if needed
                const currentMax = Math.max(...closingPrices, ...predictedPrices);
                const currentMin = Math.min(...closingPrices, ...predictedPrices);
                priceChart.options.scales.y.suggestedMax = currentMax + 0.5;
                priceChart.options.scales.y.suggestedMin = currentMin - 0.5;
                
                priceChart.update();
                
                // Update current price display
                document.querySelector('.metric-value').textContent = `$${newPrice.toFixed(2)}`;
                
                // Update recommendation
                recommendationStrength = calculateRecommendation(newPrice, predictedPrices);
                updateThermometer(recommendationStrength);
            }, 2000);

            // Handle window resize
            window.addEventListener('resize', function() {
                priceChart.resize();
            });
        });
    </script>
}